<resources>
    <string name="app_name">Zerror</string>
    <!-- Facebook application ID and custom URL scheme (app ID prefixed by 'fb'). -->
    <string name="facebook_application_id">245443093290669</string>
    <string name="fb_login_protocol_scheme">19389ed02017292fc7cdb44f4631ddba</string>

    <!-- Twitter consumer key and secret -->
    <string name="twitter_consumer_key" translatable="false">YOUR_CONSUMER_KEY</string>
    <string name="twitter_consumer_secret" translatable="false">YOUR_CONSUMER_SECRET</string>


    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="drawer_open">Open navigation drawer</string>
    <string name="drawer_close">Close navigation drawer</string>
    <string name="test_html"><![CDATA[
        <p>This is some html. Look, here\'s an <u>underline</u>.</p>
        <p>Look, this is <em>emphasized.</em> And here\'s some <b>bold</b>.</p>
        <p>This is a UL list:
        <ul>
        <li>One</li>
        <li>Two</li>
        <li>Three</li>
        </ul>
        <p>This is an OL list:
        <ol>
        <li>One</li>
        <li>Two</li>
        <li>Three</li>
        </ol>
        ]]></string>
    <string name="test_one_html">whyoz His method adds unneeded complexity to view hierarchy. You will need two additional views (A layout container and the border view)
</string>
    <string name="test_two_html">Keats’s notions that the poet is “without identity” and “the most unpoetical of anything in existence” extend Coleridge’s “suspension of disbelief,” but mostly in practical ways: Keats’s knight seems a purer creation of dramatic character than Coleridge’s Ancient Mariner or Christabel, and more like a Hamlet or a King Lear, albeit in miniature. Of course, a total subjugation of “poetic character,” as Keats calls it in his letter, would be impossible, though many modern and postmodern poets have attempted just that. In this way, Keats was certainly anticipating post-Romantic strategies of expression. Through allegorical displacement Keats is able to diffuse overobvious “self-expression” and transform what in a lesser poet would remain self-pity into a self-erasing empathy for his created characters. By using the figure of the knight as a dramatically convincing surrogate for the pathos he himself feels, Keats makes powerful use of some of the most important Romantic themes: the stress of self-examination, the fraught duality of Eros and death, and individual mortality and its mirroring in the cycles of nature.
</string>
    <string name="search">Search</string>
    <string name="setting">Setting</string>
    <array name="test_img_ary">
        <item>@drawable/panda</item>
    </array>
    <array name="test_img_ary_one">
        <item>@drawable/panda</item>
        <item>@drawable/girl_two</item>
    </array>
    <array name="test_img_ary_two">
        <item>@drawable/panda</item>
        <item>@drawable/panda</item>
        <item>@drawable/girl_three</item>
    </array>

    <array name="amenu_frag">
        <item>@drawable/nature</item>
        <item>@drawable/panda</item>
    </array>
    <string name="title_activity_code_display">Sample Demo Code</string>
    <string name="acode_view">
    "package com.example.android.bluetoothchat;\n" +

            "\n" +

            "import android.os.Bundle;\n" +

            "import android.support.v4.app.FragmentTransaction;\n" +

            "import android.view.Menu;\n" +

            "import android.view.MenuItem;\n" +

            "import android.widget.ViewAnimator;\n" +

            "\n" +

            "import com.example.android.common.activities.SampleActivityBase;\n" +

            "import com.example.android.common.logger.Log;\n" +

            "import com.example.android.common.logger.LogFragment;\n" +

            "import com.example.android.common.logger.LogWrapper;\n" +

            "import com.example.android.common.logger.MessageOnlyLogFilter;\n" +

            "\n" +

            "/**\n" +

            " * A simple launcher activity containing a summary sample description, sample log and a custom\n" +

            " * {@link android.support.v4.app.Fragment} which can display a view.\n" +

            " * \n" +

            " * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n" +

            " * on other devices it's visibility is controlled by an item on the Action Bar.\n" +

            " */\n" +

            "public class MainActivity extends SampleActivityBase {\n" +

            "\n" +

            "    public static final String TAG = \"MainActivity\";\n" +

            "\n" +

            "    // Whether the Log Fragment is currently shown\n" +

            "    private boolean mLogShown;\n" +

            "\n" +

            "    @Override\n" +

            "    protected void onCreate(Bundle savedInstanceState) {\n" +

            "        super.onCreate(savedInstanceState);\n" +

            "        setContentView(R.layout.activity_main);\n" +

            "\n" +

            "        if (savedInstanceState == null) {\n" +

            "            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n" +

            "            BluetoothChatFragment fragment = new BluetoothChatFragment();\n" +

            "            transaction.replace(R.id.sample_content_fragment, fragment);\n" +

            "            transaction.commit();\n" +

            "        }\n" +

            "    }\n" +

            "\n" +

            "    @Override\n" +

            "    public boolean onCreateOptionsMenu(Menu menu) {\n" +

            "        getMenuInflater().inflate(R.menu.main, menu);\n" +

            "        return true;\n" +

            "    }\n" +

            "\n" +

            "    @Override\n" +

            "    public boolean onPrepareOptionsMenu(Menu menu) {\n" +

            "        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n" +

            "        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n" +

            "        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n" +

            "\n" +

            "        return super.onPrepareOptionsMenu(menu);\n" +

            "    }\n" +

            "\n" +

            "    @Override\n" +

            "    public boolean onPrepareOptionsMenu(Menu menu) {\n" +

            "        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n" +

            "        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n" +

            "        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n" +

            "\n" +

            "        return super.onPrepareOptionsMenu(menu);\n" +

            "    }\n" +

            "\n" +

            "    @Override\n" +

            "    public boolean onPrepareOptionsMenu(Menu menu) {\n" +

            "        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n" +

            "        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n" +

            "        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n" +

            "\n" +

            "        return super.onPrepareOptionsMenu(menu);\n" +

            "    }\n" +

            "\n" +

            "    @Override\n" +

            "    public boolean onOptionsItemSelected(MenuItem item) {\n" +

            "        switch(item.getItemId()) {\n" +

            "            case R.id.menu_toggle_log:\n" +

            "                mLogShown = !mLogShown;\n" +

            "                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n" +

            "                if (mLogShown) {\n" +

            "                    output.setDisplayedChild(1);\n" +

            "                } else {\n" +

            "                    output.setDisplayedChild(0);\n" +

            "                }\n" +

            "                supportInvalidateOptionsMenu();\n" +

            "                return true;\n" +

            "        }\n" +

            "        return super.onOptionsItemSelected(item);\n" +

            "    }\n" +

            "\n" +

            "    /** Create a chain of targets that will receive log data */\n" +

            "    @Override\n" +

            "    public void initializeLogging() {\n" +

            "        // Wraps Android's native log framework.\n" +

            "        LogWrapper logWrapper = new LogWrapper();\n" +

            "        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n" +

            "        Log.setLogNode(logWrapper);\n" +

            "\n" +

            "        // Filter strips out everything except the message text.\n" +

            "        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n" +

            "        logWrapper.setNext(msgFilter);\n" +

            "\n" +

            "        // On screen logging via a fragment with a TextView.\n" +

            "        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n" +

            "                .findFragmentById(R.id.log_fragment);\n" +

            "        msgFilter.setNext(logFragment.getLogView());\n" +

            "\n" +

            "        Log.i(TAG, \"Ready\");\n" +

            "    }\n" +

            "}";
</string>
</resources>
